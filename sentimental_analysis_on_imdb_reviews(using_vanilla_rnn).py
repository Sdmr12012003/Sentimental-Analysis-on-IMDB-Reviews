# -*- coding: utf-8 -*-
"""Sentimental_Analysis_on_IMDB_Reviews(Using vanilla RNN).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lCZZuYg-5GZzOENryD7Js_IJZintxJj4
"""

from tensorflow import keras
from tensorflow.keras.preprocessing import sequence
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Embedding
from tensorflow.keras.layers import SimpleRNN
from tensorflow.keras.datasets import imdb
from tensorflow.keras import initializers

max_features = 20000 #This is used in loading the data , picks the most common (max_features) words
maxlen = 30 # maximum_length of sequence - truncate after thus limit
batch_size = 32

(x_train, y_train) , (x_test,y_test) = imdb.load_data(num_words=max_features)
print(len(x_train) , 'train sequences')
print(len(x_test) , 'test sequences')

#This pads (or truncates) the sequences so that they are of the maximum length

x_train = sequence.pad_sequences(x_train , maxlen = maxlen)
x_test = sequence.pad_sequences(x_test, maxlen = maxlen)
print("x_train shape: " , x_train.shape)
print("x_test shape: " , x_test.shape)

x_train[23 ,:] #here whats an example sequence looks like an imager sequence or simply array of integers

## RNN + EMBEDDED LAYER ARCHITECTURE

rnn_hidden_dim = 5
word_embedding_dim = 50
model_rnn = Sequential()
model_rnn.add(Embedding(max_features , word_embedding_dim))
model_rnn.add(SimpleRNN(rnn_hidden_dim,
                        kernel_initializer = initializers.RandomNormal(stddev = 0.001), #weights assigned to kernel
                        recurrent_initializer = initializers.Identity(gain = 1.0),      #weights assigned to state layers
                        activation = 'relu' ,
                        input_shape = x_train.shape[1:]))

model_rnn.add(Dense(1 , activation = 'sigmoid'))

model_rnn.summary()

rmsprop = keras.optimizers.RMSprop(learning_rate = 0.0001)

model_rnn.compile(loss = "binary_crossentropy" ,
                  optimizer = rmsprop,
                  metrics = ['accuracy'])

model_rnn.fit(x_train , y_train ,
              batch_size = batch_size,
              epochs = 10,
              validation_data = (x_test, y_test))

score, acc = model_rnn.evaluate(x_test , y_test,
                                batch_size = batch_size)
print("Test Score :" , score)
print("Test Accuracy" , acc)

# tuning the hyperparmaters for better performance

max_features = 20000 #This is used in loading the data , picks the most common (max_features) words
maxlen = 80 # maximum_length of sequence - truncate after thus limit

(x_train, y_train) , (x_test,y_test) = imdb.load_data(num_words=max_features)

x_train = sequence.pad_sequences(x_train , maxlen = maxlen)
x_test = sequence.pad_sequences(x_test, maxlen = maxlen)

rnn_hidden_dim = 5
word_embedding_dim = 50
model_rnn = Sequential()
model_rnn.add(Embedding(max_features , word_embedding_dim))
model_rnn.add(SimpleRNN(rnn_hidden_dim,
                        kernel_initializer = initializers.RandomNormal(stddev = 0.001), #weights assigned to kernel
                        recurrent_initializer = initializers.Identity(gain = 1.0),      #weights assigned to state layers
                        activation = 'relu' ,
                        input_shape = x_train.shape[1:]))

model_rnn.add(Dense(1 , activation = 'sigmoid'))

rmsprop = keras.optimizers.RMSprop(learning_rate = 0.0001)

model_rnn.compile(loss = "binary_crossentropy" ,
                  optimizer = rmsprop,
                  metrics = ['accuracy'])

model_rnn.fit(x_train , y_train ,
              batch_size = batch_size,
              epochs = 10,
              validation_data = (x_test, y_test))

score, acc = model_rnn.evaluate(x_test , y_test,
                                batch_size = batch_size)
print("Test Score :" , score)
print("Test Accuracy" , acc)

max_features = 5000 #This is used in loading the data , picks the most common (max_features) words
maxlen = 80 # maximum_length of sequence - truncate after thus limit

(x_train, y_train) , (x_test,y_test) = imdb.load_data(num_words=max_features)

x_train = sequence.pad_sequences(x_train , maxlen = maxlen)
x_test = sequence.pad_sequences(x_test, maxlen = maxlen)

rnn_hidden_dim = 5
word_embedding_dim = 20
model_rnn = Sequential()
model_rnn.add(Embedding(max_features , word_embedding_dim))
model_rnn.add(SimpleRNN(rnn_hidden_dim,
                        kernel_initializer = initializers.RandomNormal(stddev = 0.001), #weights assigned to kernel
                        recurrent_initializer = initializers.Identity(gain = 1.0),      #weights assigned to state layers
                        activation = 'relu' ,
                        input_shape = x_train.shape[1:]))

model_rnn.add(Dense(1 , activation = 'sigmoid'))

rmsprop = keras.optimizers.RMSprop(learning_rate = 0.0001)

model_rnn.compile(loss = "binary_crossentropy" ,
                  optimizer = rmsprop,
                  metrics = ['accuracy'])

model_rnn.fit(x_train , y_train ,
              batch_size = batch_size,
              epochs = 10,
              validation_data = (x_test, y_test))

score, acc = model_rnn.evaluate(x_test , y_test,
                                batch_size = batch_size)
print("Test Score :" , score)
print("Test Accuracy" , acc)

#just for more iterations in order to see its impact on performance

model_rnn.fit(x_train , y_train ,
              batch_size = batch_size,
              epochs = 10,
              validation_data = (x_test, y_test))

score, acc = model_rnn.evaluate(x_test , y_test,
                                batch_size = batch_size)
print("Test Score :" , score)
print("Test Accuracy" , acc)

